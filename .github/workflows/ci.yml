name: CI

on:
  pull_request:
  push:
    branches: [master]
  release:
    types: [created]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        python-version: [3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: generate cache key PY
        shell: bash
        run:
          echo "::set-env name=PY::$((python -VV; pip freeze) | sha256sum | cut -d' '
          -f1)"
      - uses: actions/cache@v1
        with:
          path: ~/.cache
          key:
            cache-${{ env.PY }}|${{ hashFiles('pyproject.toml') }}|${{
            hashFiles('poetry.lock') }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - uses: actions/cache@v1
        with:
          path: ~/.local
          key:
            local-${{ env.PY }}|${{ hashFiles('pyproject.toml') }}|${{
            hashFiles('poetry.lock') }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - run: git config --global user.name copier-ci
        shell: bash
      - run: git config --global user.email copier@copier
        shell: bash
      - run: python -m pip install poetry poetry-dynamic-versioning
        shell: bash
      - run: poetry install
        shell: bash
      - name: Run pre-commit
        shell: bash
        run: poetry run pre-commit run --all-files --color=always
      - name: Run mypy
        shell: bash
        run: poetry run mypy --ignore-missing-imports .
      - name: Run pytest
        shell: bash
        run: poetry run pytest -n auto --color=yes --verbose .

  publish:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - run: python -m pip install poetry poetry-dynamic-versioning
      - name: generate cache key PY
        run:
          echo "::set-env name=PY::$((python -VV; pip freeze) | sha256sum | cut -d' '
          -f1)"
      - uses: actions/cache@v1
        with:
          path: ~/.cache
          key:
            ${{ env.PY }}|${{ hashFiles('pyproject.toml') }}|${{
            hashFiles('poetry.lock') }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - run: poetry install
      - name: Build dist
        run: |
          poetry build
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_token_copier }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_token_copier }}
